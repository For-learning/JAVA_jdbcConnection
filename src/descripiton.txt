1、注册驱动。
2、建立连接。
  用到的类：Connection
3、创建sql语句。
  用到的类：Statement，PrepareStatement
4、执行语句。
5、处理执行结果。
  用到的类：ResultSet
6、释放资源。

对于特殊数据的处理：
日期的处理：
由于我们平时在java中用的日期类型为java.Utils.Date类型，而数据库存储的类型则为java.sql.Date类型，因此需要转换，关键点就是用getTime()方法转成毫秒值。
关键代码为：new java.sql.Date(birthday.getTime());birthday为java.Utils.Date类型.

大文本数据的处理：
写：
String sql = "insert into table(text) values(?)";
ps = conn.prepareStatement(sql);
File file = new File("src/123.txt");
Reader reader = new BufferedReader(new FileReader(file));
ps.setCharacterStream(1,reader,(int)file.length());
ps.executeUpdate();
读：
while(rs.next()){
	Clob clob = rs.getClob(1);
	Reader reader = clob.getCharacterStream();
	File file = new File("java.txt");
	Writer writer = new BufferedWriter(new FileWriter(file));
	char[] buff = new char[1024];
	for(int i = 0;(i=reader.read(buff))>0;){
		writer.writer(buff,0,i);
	}
	writer.close();
	reader.close();
}

二进制数据的处理：
写：
String sql = "insert into table(blob) values(?)";
ps = conn.prepareStatement(sql);
File file = new File("01.jpg");
InputStream in = new BufferedInputStream(new FileInputStream(file));
ps.setBinaryStream(1,in,(int)file.length());
int i = ps.executeUpdate();
in.close();
读：
rs = st.executeQuery("select blob from table");
while(rs.next()){
	InputStream in = rs.getBinaryStream(1);
	File file = new File("02.jpg");
	OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
	byte[] buff = new byte[1024];
	for(int i = 0;(i = in.read(buff))>0;){
		out.write(buff,0,i);
	}
}
out.close();
in.close();


数据源应用到jdbc中
数据源有一个属性配置文件dbcp.properties
1、将此文件加载到数据源中
public class JDBCUtial {
	public static DataSource myDataSource = null;
	
	// 由于不让实例化这个类，因此将其构造方法私有化
	private JDBCUtial() {
	}

	// 注册驱动，只需要做一次，只在类加载的时候做一次就可以了。
	static {
		try {
			// 注册驱动
			Class.forName("com.mysql.jdbc.Driver");
			// 加载属性配置文件到数据源并返回DataSource
			InputStream in = JDBCUtial.getClassLoader().getResourceAsStream("src/dbcp.properties");
			Properties prop = new Properties();
			prop.load(in);
			myDataSource = BsaicDataSourceFactory.createrDataSource(prop);
			
		} catch (ClassNotFoundException e) {
			throw new ExceptionInInitializerError();
		}
	}

	// 返回连接
	public static Connection getConnection() throws SQLException {
		// 由数据源返回连接
		return myDataSource.getConnection();
	}

	// 释放资源
	public static void free(ResultSet rs, Statement st, Connection conn) {
		 // 代码不变
	}
}
2、加载完成后返回一个数据源DataSource

3、这样数据库连接（Connection）就可以从DataSource中获取了，获取了数据库连接后就可以正常执行数据库操作了




